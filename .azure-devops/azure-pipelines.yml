trigger:
  tags:
    include:
      - '*'

pool:
  vmImage: 'ubuntu-latest'

variables:
  registry: 'alive.azurecr.io'
  repository: 'alive/bible-api'
  containerAppName: 'bible-api'
  resourceGroup: 'alive'

steps:
  - checkout: self
    fetchDepth: 0

  - script: |
      # Get the latest tag from git repository
      LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
      
      if [ -z "$LATEST_TAG" ]; then
        echo "No tags found, using commit SHA as image tag"
        IMAGE_TAG="$(git rev-parse --short HEAD)"
      else
        echo "Latest Git Tag: $LATEST_TAG"
        IMAGE_TAG="$LATEST_TAG"
      fi
      
      echo "Image Tag: $IMAGE_TAG"
      echo "##vso[task.setvariable variable=IMAGE_TAG]$IMAGE_TAG"
    displayName: 'Get Latest Git Tag'
  
  - task: Docker@2
    displayName: 'Build Docker Image'
    inputs:
      command: 'build'
      repository: '$(registry)/$(repository)'
      Dockerfile: 'Dockerfile'
      buildContext: '$(System.DefaultWorkingDirectory)'
      tags: '$(IMAGE_TAG)'
  
  - task: Docker@2
    displayName: 'Push Docker Image'
    inputs:
      command: 'push'
      containerRegistry: 'alive-acr'
      repository: '$(repository)'
      tags: '$(IMAGE_TAG)'

  - task: AzureCLI@2
    displayName: 'Deploy to Azure Container App'
    inputs:
      azureSubscription: 'HHC-Alive'
      scriptType: 'bash'
      scriptLocation: 'inlineScript'
      inlineScript: |
        echo "Checking if Container App $(containerAppName) exists..."
        
        # Check if Container App exists
        APP_EXISTS=$(az containerapp show \
          --name $(containerAppName) \
          --resource-group $(resourceGroup) \
          --query "name" -o tsv 2>/dev/null || echo "")
        
        if [ -z "$APP_EXISTS" ]; then
          echo "Container App $(containerAppName) does not exist. Skipping deployment."
          echo "Please create the Container App manually if you want to enable automatic deployment."
        else
          echo "Container App exists, updating with image $(registry)/$(repository):$(IMAGE_TAG)..."
          
          az containerapp update \
            --name $(containerAppName) \
            --resource-group $(resourceGroup) \
            --image $(registry)/$(repository):$(IMAGE_TAG) \
            --output table
          
          echo "Deployment completed!"
        fi
