trigger:
  tags:
    include:
      - '*'

resources:
  - repo: self

pool:
  vmImage: 'ubuntu-latest'

variables:
  registry: 'alive.azurecr.io'
  repository: 'alive/bible-api'
  containerAppName: 'bible-api'
  resourceGroup: 'alive'
  azureSubscription: '3765a72c-2c30-492c-8b88-7a26522903f8'

steps:
  - script: |
      # Extract tag name from Build.SourceBranch (format: refs/tags/v1.0.0)
      TAG_NAME=$(echo "$(Build.SourceBranch)" | sed 's/refs\/tags\///')
      echo "Git Tag: $TAG_NAME"
      echo "##vso[task.setvariable variable=IMAGE_TAG]$TAG_NAME"
    displayName: 'Get Git Tag'
  
  - task: Docker@2
    displayName: 'Build Docker Image'
    inputs:
      command: 'build'
      repository: '$(registry)/$(repository)'
      Dockerfile: 'Dockerfile'
      buildContext: '$(System.DefaultWorkingDirectory)'
      tags: '$(IMAGE_TAG)'
  
  - task: Docker@2
    displayName: 'Push Docker Image'
    inputs:
      command: 'push'
      containerRegistry: 'alive-acr'
      repository: '$(repository)'
      tags: '$(IMAGE_TAG)'
  
  - task: AzureCLI@2
    displayName: 'Deploy to Azure Container App'
    inputs:
      azureSubscription: '$(azureSubscription)'
      scriptType: 'bash'
      scriptLocation: 'inlineScript'
      inlineScript: |
        echo "Checking if Container App $(containerAppName) exists..."
        
        # Check if Container App exists
        APP_EXISTS=$(az containerapp show \
          --name $(containerAppName) \
          --resource-group $(resourceGroup) \
          --query "name" -o tsv 2>/dev/null || echo "")
        
        if [ -z "$APP_EXISTS" ]; then
          echo "Container App $(containerAppName) does not exist. Skipping deployment."
          echo "Please create the Container App manually if you want to enable automatic deployment."
        else
          echo "Container App exists, updating with image $(registry)/$(repository):$(IMAGE_TAG)..."
          
          az containerapp update \
            --name $(containerAppName) \
            --resource-group $(resourceGroup) \
            --image $(registry)/$(repository):$(IMAGE_TAG) \
            --output table
          
          echo "Deployment completed!"
        fi
